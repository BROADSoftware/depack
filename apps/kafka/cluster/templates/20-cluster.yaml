apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: {{ template "kafkaCluster.clusterName" . }}
  namespace:  {{ .Release.Namespace }}
spec:
  kafka:
    version: 2.5.0
    replicas: {{ .Values.kafka.replicas | default 1 }}
    listeners:
{{ toYaml .Values.kafka.listeners | indent 6 }}
    config:
      {{- $defaultConfig :=  dict "log.message.format.version" "2.5" -}}
      {{- range $key, $val := merge (.Values.kafka.config|default dict ) $defaultConfig  }}
      {{ $key }}: {{ $val | quote }}
      {{- end }}
    template:
      statefulset:
        podManagementPolicy: Parallel  # OrderedReady
      pod:
        metadata:
          labels:
            middleware: kafka-{{ template "kafkaCluster.clusterName" . }}
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: middleware
                      operator: In
                      values:
                        - kafka-{{ template "kafkaCluster.clusterName" . }}
                topologyKey: "kubernetes.io/hostname"        
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: {{ .Values.kafka.storage.size | default "5Gi" }}
        deleteClaim: false
        class: {{ .Values.kafka.storage.class | default "default" }}
  zookeeper:
    replicas: {{ .Values.zookeeper.replicas | default 1 }}
    storage:
      type: persistent-claim
      size: {{ .Values.zookeeper.storage.size | default "2Gi" }}
      deleteClaim: false
      class: {{ .Values.kafka.storage.class | default "default" }}
    template:
      statefulset:
        podManagementPolicy: Parallel  # OrderedReady
      pod:
        metadata:
          labels:
            middleware: zookeeper-{{ template "kafkaCluster.clusterName" . }}
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: middleware
                      operator: In
                      values:
                        - zookeeper-{{ template "kafkaCluster.clusterName" . }}
                topologyKey: "kubernetes.io/hostname"        
  entityOperator:
    topicOperator: {}
    userOperator: {}



